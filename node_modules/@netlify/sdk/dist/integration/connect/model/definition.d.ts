import * as CSITypes from "@stackbit/types";
import { NodesApi, Supports } from "../sdk.js";
import { ModelWalker } from "./walker.js";
import { ModelBuilder } from "./builder.js";
type DefineArgs = {
    name: string;
    description?: string;
    visitor?: Visitor;
};
export type DefineObjectArgs = DefineArgs & {
    fields: ModelFields;
};
export type DefineNodeArgs = DefineObjectArgs & {
    cacheFieldName?: string;
};
export interface FieldGroupItem {
    name: string;
    label: string;
    icon?: string;
}
/**
 * Defines a document type.
 */
export type DefineDocumentArgs = DefineObjectArgs & {
    label?: string;
    cacheFieldName?: string;
    fieldGroups?: Array<FieldGroupItem>;
};
export type DefineUnionArgs = DefineArgs & {
    types: Array<string | ModelDefinition>;
};
type DefineKind = `Object` | `Union` | `Node`;
export type ModelField = {
    name: string;
    type: string | ModelDefinition;
    required?: boolean;
    list?: boolean | `required`;
    description?: string;
    visitor?: FieldVisitor;
    label?: string;
    defaultValue?: unknown | (() => unknown);
    hidden?: boolean;
    readOnly?: boolean;
    localized?: boolean;
    group?: string;
};
export type ModelFields = {
    [name: string]: Omit<ModelField, `name`>;
} | ModelField[];
export type RawNodeObject = {
    id?: string;
    [key: string]: any;
};
type VisitorValue = any;
export type Visitor = (value: VisitorValue, info: {
    visitorContext: any;
    setVisitorContext: (newContext: any) => any;
    fields: ModelWalker["fields"];
}) => VisitorValue;
export type FieldVisitor = (value: VisitorValue, info: ReturnType<ModelWalker["fieldByName"]>) => VisitorValue;
export declare const builtInStackbitStringTypes: Set<string>;
export declare const builtInStackbitTypes: Set<string>;
export declare const builtInTypes: Set<string>;
export declare const mappedBuiltinTypes: Map<string, string>;
export declare const builtInScalars: Set<string>;
type ModelDefinitionInput = {
    kind: DefineKind;
    ModelBuilder: ModelBuilder;
    nodesApi: NodesApi;
    createApi?: CSITypes.Cache;
    shouldAutoRenameFieldsAndModels: boolean;
    supports: Supports;
} & DefineArgs & Partial<DefineNodeArgs & DefineObjectArgs & DefineUnionArgs & DefineDocumentArgs>;
export declare class ModelDefinition {
    compositeTypes?: Array<string | ModelDefinition>;
    compositeTypesSet: Set<string>;
    description?: string;
    cacheFieldName?: string;
    ModelWalker: ModelWalker;
    ModelBuilder: ModelBuilder;
    visitor?: Visitor;
    camelToOriginalNames: Map<string, string>;
    originalToCamelNames: Map<string, string>;
    fields: ModelField[];
    fieldsMap: Map<string, ModelField>;
    fieldGroups?: DefineDocumentArgs["fieldGroups"];
    private definedKind;
    private typeName;
    private originalName?;
    private nodesApi;
    private createApi?;
    private isMixedUnion;
    private label?;
    private shouldAutoRenameFieldsAndModels;
    private supports;
    constructor(input: ModelDefinitionInput);
    getFields(): ModelField[];
    getTypeName(): string;
    getOriginalName(): string;
    get isNodeType(): boolean;
    get isObjectType(): boolean;
    get isUnionType(): boolean;
    getDefinedTypeName(type: string | ModelDefinition, fieldName?: string): string;
    prefixedTypeName(typeName?: string): string;
    getFinalFieldName(fieldName: string, unionModelName?: string): string;
    private get devOnlyFieldGroup();
    toCreateModel(): false | {
        name: string;
        label: string;
        type: "object" | "data";
        fieldGroups: FieldGroupItem[] | undefined;
        fields: (CSITypes.FieldString | CSITypes.FieldUrl | CSITypes.FieldSlug | CSITypes.FieldText | CSITypes.FieldMarkdown | CSITypes.FieldHtml | CSITypes.FieldNumber | CSITypes.FieldBoolean | CSITypes.FieldDate | CSITypes.FieldDatetime | CSITypes.FieldColor | CSITypes.FieldJson | CSITypes.FieldRichText | CSITypes.FieldFile | (CSITypes.FieldCommonProps & CSITypes.FieldEnumDropdownProps) | (CSITypes.FieldCommonProps & CSITypes.FieldEnumThumbnailsProps) | (CSITypes.FieldCommonProps & CSITypes.FieldEnumPaletteProps) | (CSITypes.FieldCommonProps & CSITypes.FieldEnumPaletteColorsProps) | CSITypes.FieldImage | CSITypes.FieldObject | CSITypes.FieldModel | CSITypes.FieldReference | CSITypes.FieldCrossReference | CSITypes.FieldStyle | (CSITypes.FieldCommonProps & CSITypes.FieldListItemsBasicProps) | (CSITypes.FieldCommonProps & CSITypes.FieldListItemsEnumProps) | (CSITypes.FieldCommonProps & CSITypes.FieldListItemsImageProps) | (CSITypes.FieldCommonProps & CSITypes.FieldListItemsNumberProps) | (CSITypes.FieldCommonProps & CSITypes.FieldListItemsObjectProps) | (CSITypes.FieldCommonProps & CSITypes.FieldListItemsModelProps) | (CSITypes.FieldCommonProps & CSITypes.FieldListItemsReferenceProps) | (CSITypes.FieldCommonProps & CSITypes.FieldListItemsCrossReferenceProps))[];
    };
    private sdkFieldsToStackbitFields;
    get dataAPI(): {
        name: string;
        originalName: string;
        insert: (nodes?: RawNodeObject | RawNodeObject[] | undefined) => void | Promise<void> | (void | Promise<void> | null)[] | null;
        create: (nodes?: RawNodeObject | RawNodeObject[] | undefined) => void | Promise<void> | (void | Promise<void> | null)[] | null;
        delete: (nodeIds: string | string[]) => void | void[];
        readonly fields: import("./walker.js").Fields;
    };
    buildWalker(): void;
    private getModelByName;
    hasField(fieldName: string): boolean;
    private get delete();
    private get insert();
    createNodeId(rawId: string): string;
    private prepareNode;
    setIsMixedUnion(): void;
    toSDL(): string;
    private containsIllegalChars;
    private processInputDefinitionFields;
    private processInputDefinition;
    private validateFieldDefinition;
}
export {};
