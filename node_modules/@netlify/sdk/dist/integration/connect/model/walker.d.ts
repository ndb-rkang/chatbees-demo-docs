import { ModelDefinition, RawNodeObject } from "./definition.js";
type getModelByName = ModelDefinition["getModelByName"];
export type Fields = {
    [fieldName: string]: Field;
};
export type Field = {
    name: string;
    originalName: string;
    typeName: string;
    fields?: Fields;
    required: boolean;
    list: boolean | `required`;
    is: {
        node: boolean;
        object: boolean;
        union: boolean;
        scalar: boolean;
    };
};
type VisitorState = {
    context: any;
};
export declare class ModelWalker {
    private model;
    getModelByName: getModelByName;
    private coersionFields;
    private mappedCoersionFields;
    private allowedFieldNames;
    constructor({ model, getModelByName, }: {
        model: ModelDefinition;
        getModelByName: getModelByName;
    });
    build(): void;
    fieldByName(name: string, visitorState: VisitorState): {
        name: string;
        readonly originalName: string;
        typeName: string;
        list: boolean | "required";
        required: boolean;
        is: {
            scalar: boolean;
            node: boolean;
            union: boolean;
            object: boolean;
        };
        readonly fields: Fields | undefined;
        readonly visitorContext: any;
        setVisitorContext(newValue: any): void;
    };
    get fields(): Fields;
    coerceModelValue(modelValue: RawNodeObject, path?: Array<string>, combinedType?: ModelDefinition, visitorState?: VisitorState, forPackage?: `content-engine` | `stackbit`): RawNodeObject;
    private setNodeId;
    private handleUnionValue;
    private coerceFields;
    private setInternalProperty;
    private throwOnMissingTypename;
    private throwOnIncorrectUnionTypename;
    private throwOnUndefinedModelFields;
}
export {};
