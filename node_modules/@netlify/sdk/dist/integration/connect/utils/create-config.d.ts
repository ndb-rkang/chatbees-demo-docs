import { StackbitConfig } from "@stackbit/types";
export type CreateConfig = Omit<StackbitConfig, "stackbitVersion" | "devCommand" | "contentEngine" | "contentModels" | "models" | "modelsSource" | "logicFields" | "noEncodeFields" | "omitFields" | "encodedFieldTypes" | "cmsName" | "staticDir" | "uploadDir" | "assets" | "pagesDir" | "dataDir" | "pageLayoutKey" | "objectTypeKey" | "excludePages"> & {
    netlifyCreateVersion: string;
};
export declare function convertCreateConfigToStackbitConfig(config: CreateConfig): {
    actions?: (import("@stackbit/types").CustomActionGlobal | import("@stackbit/types").CustomActionBulk)[] | undefined;
    ssgName?: "custom" | "nextjs" | "gatsby" | "jekyll" | "hugo" | "eleventy" | "vuepress" | "gridsome" | "nuxt" | "sapper" | "hexo" | "unibit" | undefined;
    ssgVersion?: string | undefined;
    nodeVersion?: string | undefined;
    postGitCloneCommand?: string | undefined;
    preInstallCommand?: string | undefined;
    postInstallCommand?: string | undefined;
    installCommand?: string | undefined;
    import?: import("@stackbit/types").Import | undefined;
    buildCommand?: string | undefined;
    publishDir?: string | undefined;
    styleObjectModelName?: string | null | undefined;
    presetSource?: import("@stackbit/types").PresetSourceFiles | undefined;
    sidebarButtons?: import("@stackbit/types").SidebarButton[] | undefined;
    siteMap?: import("@stackbit/types").SiteMapFunction | undefined;
    sitemap?: import("@stackbit/types").SiteMapFunction | undefined;
    treeViews?: import("@stackbit/types").TreeViewsFunction | undefined;
    presetReferenceBehavior?: "copyReference" | "duplicateContents" | undefined;
    nonDuplicatableModels?: string[] | undefined;
    duplicatableModels?: string[] | undefined;
    customContentReload?: boolean | undefined;
    experimental?: import("@stackbit/types").Experimental | undefined;
    contentSources?: import("@stackbit/types").ContentSourceInterface<any, any, any, any, any>[] | undefined;
    assetSources?: import("@stackbit/types").AssetSource[] | undefined;
    viewports?: import("@stackbit/types").Viewport[] | undefined;
    mapModels?: ((options: {
        models: import("@stackbit/types").ModelWithSource[];
    }) => import("@stackbit/types").ModelWithSource[]) | undefined;
    modelExtensions?: import("@stackbit/types").ModelExtension[] | undefined;
    mapDocuments?: ((options: {
        documents: import("@stackbit/types").DocumentWithSource[];
        models: import("@stackbit/types").ModelWithSource[];
    }) => import("@stackbit/types").DocumentWithSource[]) | undefined;
    onContentCreate?: ((options: import("@stackbit/types").OnContentCreateOptions) => Record<string, any>) | undefined;
    onDocumentCreate?: ((options: import("@stackbit/types").OnDocumentCreateOptions) => Promise<{
        documentId: string;
    }>) | undefined;
    onDocumentUpdate?: ((options: import("@stackbit/types").OnDocumentUpdateOptions) => Promise<void>) | undefined;
    onDocumentDelete?: ((options: import("@stackbit/types").OnDocumentDeleteOptions) => Promise<void>) | undefined;
    onDocumentsPublish?: ((options: import("@stackbit/types").OnDocumentsPublishOptions) => Promise<void>) | undefined;
    stackbitVersion: string;
};
export declare function configureNetlifyCreate(config: CreateConfig): {
    actions?: (import("@stackbit/types").CustomActionGlobal | import("@stackbit/types").CustomActionBulk)[] | undefined;
    ssgName?: "custom" | "nextjs" | "gatsby" | "jekyll" | "hugo" | "eleventy" | "vuepress" | "gridsome" | "nuxt" | "sapper" | "hexo" | "unibit" | undefined;
    ssgVersion?: string | undefined;
    nodeVersion?: string | undefined;
    postGitCloneCommand?: string | undefined;
    preInstallCommand?: string | undefined;
    postInstallCommand?: string | undefined;
    installCommand?: string | undefined;
    import?: import("@stackbit/types").Import | undefined;
    buildCommand?: string | undefined;
    publishDir?: string | undefined;
    styleObjectModelName?: string | null | undefined;
    presetSource?: import("@stackbit/types").PresetSourceFiles | undefined;
    sidebarButtons?: import("@stackbit/types").SidebarButton[] | undefined;
    siteMap?: import("@stackbit/types").SiteMapFunction | undefined;
    sitemap?: import("@stackbit/types").SiteMapFunction | undefined;
    treeViews?: import("@stackbit/types").TreeViewsFunction | undefined;
    presetReferenceBehavior?: "copyReference" | "duplicateContents" | undefined;
    nonDuplicatableModels?: string[] | undefined;
    duplicatableModels?: string[] | undefined;
    customContentReload?: boolean | undefined;
    experimental?: import("@stackbit/types").Experimental | undefined;
    contentSources?: import("@stackbit/types").ContentSourceInterface<any, any, any, any, any>[] | undefined;
    assetSources?: import("@stackbit/types").AssetSource[] | undefined;
    viewports?: import("@stackbit/types").Viewport[] | undefined;
    mapModels?: ((options: {
        models: import("@stackbit/types").ModelWithSource[];
    }) => import("@stackbit/types").ModelWithSource[]) | undefined;
    modelExtensions?: import("@stackbit/types").ModelExtension[] | undefined;
    mapDocuments?: ((options: {
        documents: import("@stackbit/types").DocumentWithSource[];
        models: import("@stackbit/types").ModelWithSource[];
    }) => import("@stackbit/types").DocumentWithSource[]) | undefined;
    onContentCreate?: ((options: import("@stackbit/types").OnContentCreateOptions) => Record<string, any>) | undefined;
    onDocumentCreate?: ((options: import("@stackbit/types").OnDocumentCreateOptions) => Promise<{
        documentId: string;
    }>) | undefined;
    onDocumentUpdate?: ((options: import("@stackbit/types").OnDocumentUpdateOptions) => Promise<void>) | undefined;
    onDocumentDelete?: ((options: import("@stackbit/types").OnDocumentDeleteOptions) => Promise<void>) | undefined;
    onDocumentsPublish?: ((options: import("@stackbit/types").OnDocumentsPublishOptions) => Promise<void>) | undefined;
    stackbitVersion: string;
};
