import type { ContentSourceInterface, InitOptions } from "@stackbit/types";
import { NetlifyIntegration } from "../../index.js";
import { APIPromiseName, APIName } from "../sdk.js";
export default class CreateConnector implements ContentSourceInterface<any, any, any, any, any> {
    integration: Promise<NetlifyIntegration<import("zod").ZodUnknown, import("zod").ZodUnknown, import("zod").ZodUnknown, import("zod").ZodUnknown>>;
    _getProjectManageUrl: () => string;
    options: Record<string, any>;
    constructor(args?: {
        options?: Record<string, any>;
    });
    getContentSourceType(): string;
    getProjectId(): string;
    getVersion(): Promise<{
        interfaceVersion: string;
        contentSourceVersion: string;
    }>;
    getProjectEnvironment(): string;
    getProjectManageUrl(): string;
    hasAccess(): Promise<{
        hasPermissions: boolean;
        hasConnection: boolean;
    }>;
    validateDocuments(): Promise<{
        errors: never[];
    }>;
    reset(): Promise<void>;
    destroy(): Promise<void>;
    _getConnector(): Promise<import("../sdk.js").NetlifyConnector<import("../sdk.js").ConnectorInit>>;
    _getAPIPromises(name: APIPromiseName): Promise<{
        connect: {
            resolve: (value?: unknown) => void;
            reject: (reason?: any) => void;
            promise: Promise<any> | undefined;
        };
        create: {
            resolve: (value?: unknown) => void;
            reject: (reason?: any) => void;
            promise: Promise<any> | undefined;
        };
    }>;
    _getImplementation(name: APIName): Promise<(false | ((args?: any, options?: any) => any)) | undefined>;
    init({ cache }: InitOptions<any, any, any, any>): Promise<void>;
    updateDocument(stuff: any): Promise<any>;
    createDocument(stuff: any): Promise<any>;
    deleteDocument(stuff: any): Promise<any>;
    publishDocuments(stuff: any): Promise<any>;
    getSchema(): Promise<{
        models: (import("@stackbit/types").DataModel<unknown> | import("@stackbit/types").ObjectModel<unknown>)[];
        locales: import("@stackbit/types").Locale[];
        context: {};
    }>;
    getModels(): Promise<(import("@stackbit/types").DataModel<unknown> | import("@stackbit/types").ObjectModel<unknown>)[] | undefined>;
    getLocales(): Promise<import("@stackbit/types").Locale[]>;
    private connectSyncFinished;
    getDocuments(): Promise<import("@stackbit/types").Document<unknown>[]>;
    getAssets(): Promise<import("@stackbit/types").Asset<unknown>[]>;
    uploadAsset(): Promise<any>;
}
